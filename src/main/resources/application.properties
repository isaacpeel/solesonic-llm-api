spring.config.import=optional:file:.env[.properties]

server.shutdown=immediate

spring.application.name=Solesonic LLM API

server.servlet.context-path=/${BASE_URI}

spring.datasource.username=${POSTGRES_USER}

spring.datasource.url=${DB_URL}
spring.datasource.password=${DB_PASSWORD}

jira.api.uri=https://api.atlassian.com

training.task.enabled=${TRAINING_ENABLED:false}
confluence.training.task.enabled=${CONFLUENCE_TRAINING_ENABLED:false}

spring.security.oauth2.resourceserver.jwt.issuer-uri=${ISSUER_URI}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${JWK_SET_URI}

spring.ai.vectorstore.pgvector.table-name=vector_store

spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true
spring.flyway.placeholders.DB_OWNER=${POSTGRES_USER}

cors.allowed.origins=${CORS_ALLOWED_ORIGINS}

spring.ai.mcp.client.name=mcp-client
spring.ai.mcp.client.version=1.0.0
spring.ai.mcp.client.type=sync
spring.ai.mcp.client.toolcallback.enabled=true
spring.ai.mcp.client.enabled=${MCP_ENABLED:false}

spring.ai.mcp.client.sse.connections.solesonic.url=${SOLESONIC_MCP_URI}

spring.security.oauth2.client.provider.authserver.issuer-uri=${ISSUER_URI}

spring.security.oauth2.client.registration.mcp-client.client-id=${MCP_CLIENT_ID}
spring.security.oauth2.client.registration.mcp-client.client-secret=${MCP_CLIENT_SECRET}
spring.security.oauth2.client.registration.mcp-client.authorization-grant-type=client_credentials
spring.security.oauth2.client.registration.mcp-client.provider=authserver

logging.level.io.modelcontextprotocol.client=DEBUG
logging.level.io.modelcontextprotocol.spec=DEBUG

solesonic.llm.bot.name=${BOT_NAME:solesonic-llm-api}

solesonic.llm.jira.url.template=${JIRA_URL_TEMPLATE:https://solesonic-llm-api.atlassian.net/browse/{issueId}
solesonic.llm.jira.cloud.id.path=${JIRA_CLOUD_ID_PATH:yourCloudId}

# Atlassian OAuth configuration
atlassian.oauth.token-uri=${ATLASSIAN_OAUTH_TOKEN_URI:https://auth.atlassian.com/oauth/token}
atlassian.oauth.client-id=${ATLASSIAN_OAUTH_CLIENT_ID}
atlassian.oauth.client-secret=${ATLASSIAN_OAUTH_CLIENT_SECRET}

# Atlassian token storage configuration
atlassian.tokens.secrets.prefix=${ATLASSIAN_TOKENS_SECRETS_PREFIX:/solesonic/atlassian/tokens}
atlassian.tokens.secrets.adminKey=${ATLASSIAN_TOKENS_ADMIN_KEY:admin}
atlassian.tokens.cache.enabled=${ATLASSIAN_TOKENS_CACHE_ENABLED:true}
atlassian.tokens.cache.ttl-seconds=${ATLASSIAN_TOKENS_CACHE_TTL:3300}
atlassian.tokens.migration.enabled=${ATLASSIAN_TOKENS_MIGRATION_ENABLED:false}

# Token Broker configuration
atlassian.token.broker.cache.enabled=${BROKER_CACHE_ENABLED:true}
atlassian.token.broker.cache.expiry-skew-seconds=${BROKER_CACHE_EXPIRY_SKEW:45}
atlassian.token.broker.retry.jitter=${BROKER_RETRY_JITTER:true}
atlassian.token.broker.required-scope=${BROKER_REQUIRED_SCOPE:token:mint:jira}
atlassian.token.broker.required-audience=${BROKER_REQUIRED_AUDIENCE:token-broker}

# AWS configuration (optional KMS key)
aws.kms.key-id=${AWS_KMS_KEY_ID:}
